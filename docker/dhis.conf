# ----------------------------------------------------------------------
# Database connection
# ----------------------------------------------------------------------

# Hibernate SQL dialect
connection.dialect = ${DHIS2_DB_DIALECT}

# JDBC driver class
connection.driver_class = ${DHIS2_DB_DRIVER}

# Database connection URL
connection.url = ${DHIS2_CONNECTION_URL}

# Database username
connection.username = ${DHIS2_DB_USERNAME}

# Database password
connection.password = ${DHIS2_DB_PASSWORD}

# Max size of connection pool (default: 40)
connection.pool.max_size = 100

# ----------------------------------------------------------------------
# Database connection for PostgreSQL [Optional]
# ----------------------------------------------------------------------

# Minimum number of Connections a pool will maintain at any given time (default: 5).
connection.pool.min_size=5

# Initial size of connection pool (default : 5)
#Number of Connections a pool will try to acquire upon startup. Should be between minPoolSize and maxPoolSize
connection.pool.initial_size=5

#Determines how many connections at a time will try to acquire when the pool is exhausted.
connection.pool.acquire_incr=5

#Seconds a Connection can remain pooled but unused before being discarded. Zero means idle connections never expire. (default: 7200)
connection.pool.max_idle_time=7200

#Number of seconds that Connections in excess of minPoolSize should be permitted to remain idle in the pool before being culled (default: 0)
connection.pool.max_idle_time_excess_con=0

#If this is a number greater than 0, dhis2 will test all idle, pooled but unchecked-out connections, every this number of seconds. (default: 0)
connection.pool.idle.con.test.period=0

#If on, an operation will be performed at every connection checkout to verify that the connection is valid. (default: false)
connection.pool.test.on.checkout=false

#If on, an operation will be performed asynchronously at every connection checkin to verify that the connection is valid. (default: on)
connection.pool.test.on.checkin=on

#Defines the query that will be executed for all connection tests. Ideally this config is not needed as postgresql driver already provides an efficient test query. The config is exposed simply for evaluation, do not use it unless there is a reason to.
connection.pool.preferred.test.query=select 1

#Configure the number of helper threads used by dhis2 for jdbc operations. (default: 3)
connection.pool.num.helper.threads=3


# ----------------------------------------------------------------------
# Server [Mandatory]
# ----------------------------------------------------------------------

# Enable secure settings if deployed on HTTPS, default 'off', can be 'on'
server.https = on

# Server base URL
server.base.url = ${DHIS2_BASE_URL}

# ----------------------------------------------------------------------
# System [Optional]
# ----------------------------------------------------------------------

# System mode for database read operations only, can be 'off', 'on'
system.read_only_mode = off

# Session timeout in seconds, default is 3600
system.session.timeout = 3600

# SQL view protected tables, can be 'on', 'off'
system.sql_view_table_protection = on

# SQL view write enabled, can be 'on', 'off'
system.sql_view_write_enabled = off

# Disable server-side program rule execution, can be 'on', 'off'
system.program_rule.server_execution = on

# ----------------------------------------------------------------------
# Encryption [Optional]
# ----------------------------------------------------------------------

# Encryption
encryption.password = ${DHIS2_ENCRYPTION_PASSWORD}


#tracker.import.preheat.cache.enabled = off


# ----------------------------------------------------------------------
# OIDC
# ----------------------------------------------------------------------

# Enables OIDC login
oidc.oauth2.login.enabled = ${DHIS2_OAUTH_ENABLED}

# Okta OIDC settings
oidc.provider.keycloak.client_id = ${DHIS2_OAUTH_CLIENT_ID}
oidc.provider.keycloak.client_secret = ${DHIS2_OAUTH_CLIENT_SECRET}
oidc.provider.keycloak.mapping_claim = email
oidc.provider.keycloak.display_alias = Sign in with DOH SSO
oidc.provider.keycloak.enable_logout = on
oidc.provider.keycloak.scopes = email
oidc.provider.keycloak.authorization_uri = ${DHIS2_OAUTH_AUTHORIZATION_URI}
oidc.provider.keycloak.token_uri = ${DHIS2_OAUTH_TOKEN_URI}
oidc.provider.keycloak.user_info_uri = ${DHIS2_OAUTH_USER_INFO_URI}
oidc.provider.keycloak.jwk_uri = ${DHIS2_OAUTH_JWK_URI}
oidc.provider.keycloak.end_session_endpoint = ${DHIS2_OAUTH_END_SESSION_ENDPOINT}
oidc.provider.keycloak.redirect_url = ${DHIS2_OAUTH_REDIRECT_URI}

# ----------------------------------------------------------------------
# File store
# ----------------------------------------------------------------------

# File store provider. Currently 'filesystem' and 'aws-s3' are supported.
#filestore.provider = 'aws-s3'

# Directory in external directory on local file system and bucket on AWS S3
#filestore.container = files

# The following configuration is applicable to cloud storage only (AWS S3)
# Datacenter location. Optional but recommended for performance reasons.
#filestore.location = eu-west-1

# Username / Access key on AWS S3
#filestore.identity = L2wfXXWzsXf6TYEeY01F

# Password / Secret key on AWS S3 (sensitive)
#filestore.secret = V5Vde2IVC7NriTVxw1h4RBbO8KBMIQsi0T0tRo9b


# ----------------------------------------------------------------------
# Redis
# ----------------------------------------------------------------------

#redis.enabled = on

# Cache invalidation config
#redis.cache.invalidation.enabled = on

# Shared Redis configuration
#redis.host = REDIS_HOST
#redis.port = REDIS_PORT
#redis.password = PASSWORD
#redis.use.ssl = true

# Optional, defaults to 2 minutes
#leader.time.to.live.minutes = 4


# ----------------------------------------------------------------------
# Monitoring
# ----------------------------------------------------------------------

# DHIS2 API monitoring
monitoring.api.enabled = on

# JVM monitoring
monitoring.jvm.enabled = on

# Database connection pool monitoring
monitoring.dbpool.enabled = on

# Hibernate monitoring, do not use in production
monitoring.hibernate.enabled = off

# Uptime monitoring
monitoring.uptime.enabled = on

# CPU monitoring
monitoring.cpu.enabled = on

